services:
  # backend:
  #   build: ./backend
  #   container_name: app-backend
  #   restart: always
  #   env_file: ./backend/.env
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     - db
  #     - redis
  #   volumes:
  #     - .:/app
  #   command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
  #   networks:
  #     - app-network
  db:
    image: postgres:latest
    container_name: app-db
    env_file: .env
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    command: postgres -c max_connections=1000
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: app-pgadmin
    env_file: .env
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: app-redis
    env_file: .env
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  app-network:
    driver: bridge
